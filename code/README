************************************************
*             meg, version 1.0                 *
************************************************

The code is structured as follows:

****************** makefile ******************

Compiles the software, sets the name of the object file to "meg".  Has a "make clean"
option if the user wants a fresh build.


****************** main.cpp ******************

Other files included: "fitPSF.h"
                      "fitGAL.h"
                      "globals.h"

Provides the interface to the software.  Organises the command line inputs based
on the flags:
    "-i image.fits" indicates that image.fits is the main image containing the
        galaxy to be modelled
    "-c coords.txt" indicates that coords.txt contains the co-ords defining the
        region in image.fits that contains the galaxy
    "-p psfcoords.txt" indicates that psfcoords.txt contains the region in
        image.fits that contains a suitable star for the PSF to calculated from
    OR
    "-p psf.fits" indicates that psf.fits is a separate image describing the PSF
    "-m bobyqa" indicates that BOBYQA is the minimisation algorithm to be used
    "-o n" indicates that the model generated by the software should not be saved
        as a new FITS file (the default is that the model *is* saved)
        
Exits with error if any of the arguments are invalid or if there are too many/not
enough for the software to run.

Outputs help on using the software if given the argument "--help".

Outputs the current version information if given the argument "--version".

If the "-p" argument is a co-ordinate file then the global variable psfimage is 
set to 1, the file is passed to fitPSF.cpp and the PSF is calculated.  Otherwise 
fitPSF.cpp is not used; in this case the psfimage is set to 0 to indicate to the 
program that the PSF has been input as an image.

Then the arguments are passed to fitGAL.cpp and the galaxy is modelled.


****************** fitPSF.cpp ****************** (header fitPSF.h)

Other files included: "megio.h"
                      "callfitness.h"
                      "psfminimise.h"
                      "profile.h"
                      
Calculates sigma, the width of the PSF, from a star located within the region
described by the psf co-ordinate file.

Reads in the co-ordinates using readin() defined in megio.cpp, and the pixel values
in the region defined by the co-ordinates using read_values(), defined in megio.cpp.

Estimates the central co-ordinates of the star by finding the central co-ordinates
of the region.  Calculates the background value using estimate_b() defined in
estimates.cpp.  Estimates the central brightness by finding the value of the pixel
located at the central co-ordinates, and subtracting the background value.  Sets
the initial estimate of sigma to 1.

Fits the star using these 5 parameters and when a model of the star with a good
enough fitness is found the resulting value of sigma is returned.


****************** fitGAL.cpp ****************** (header fitGAL.h)

Other files included: "estimates.h"
                      "megio.h"
                      "callfitness.h"
                      "callminimise.h"
                      "profile.h"
                      "globals.h"
                      
Calculates initial estimates for the model parameters, creates a model from these
estimates, and minimises the difference between the model and the actual values.

Reads in the co-ords of the region and the corresponding pixel values as above.

Initial estimates for the central co-ordinates, the background level, and the
central brightness calculated as above.  Initial estimate of scale radius found 
using estimate_rs (estimates.cpp).  Initial value of Sersic index set to 2.5, 
axis ratio set to 1, position angle set to 0, and delta set to 1.

If the global variable psfimage equals 0 then the pixels in the input PSF image 
are read into a 2D vector array using read_all_values (megio.cpp).

Initiates minimisation process.

Once the minimisation has finished the final parameter values are output, the 
residual is written over the initial region and saved into a new file using
newImage (megio.cpp).  By default the model is written to a new file using sersicImage
(megio.cpp) unless the user specified otherwise at run time.


****************** estimates.cpp ****************** (header estimates.h)

Other files included: globals.h

Contains functions to calculate initial estimates.

estimate_b(2D vector of pixels in region): estimates background level by histogramming
the 2D vector and returns the corresponding pixel value of the bin with the highest
value.

estimate_rs(central co-ords, 2D vector of pixels in region, central brightness, 
axis ratio, background level): steps out from the central co-ordinates until the 
pixel value is roughly the central brightness divided by e.  Returns the resulting
distance from the centre.

                                 
****************** megio.cpp ****************** (header megio.h)

Other files included: "fitsio.h" (external CFITSIO library)
                      "globals.h"
                      
Contains I/O routines.

readin(filename): reads in co-ordinates from the specified file into 2D array and
returns it.

read_values(filename, 2D co-ordinate array, x and y dimensions of region): reads
in pixel values from the FITS file specified by filename and the co-ordinates, 
and saves them into 2D vector array.  Returns the 2D vector array of pixel values.

read_all_values(filename): reads in all the pixel values in the specified image 
and returns them in a 2D vector.

newImage(filename, 2D array of pixel values, x and y dimensions of region, 2D
co-ordinate array): creates a copy of the file specified by filename, writes the
2D array of pixel values into the region in the image specified by the co-ordinates.
Saves new file as the original filename plus "_residual".

sersicImage(filename, 2D array of pixel values, x and y dimensions of region):
writes the 2d array of pixel values into a new file of size x by y.  Saves the 
file as filename plus "_model".


****************** callminimise.cpp ****************** (header callminimise.h)

Other files included: "amoeba.cpp" (external Numerical Recipes code)
                      "powell.cpp" (external Numerical Recipes code)
                      "dlib/optimization.h" (external dlib library)
                      "levmar.h" (external levmar library)
                      "quasi.cpp" (external Numerical Recipes code)
                      
Provides an interface to the minimisation functions.

callAmoeba(vector of estimates): sets up the necessary input to the Nelder-Mead
minimisation routine and calls it.  Restarts when a minimum is found to avoid 
chance of local minimum.  Returns vector of optimised estimates.

callPowell(vector of estimates): initiates Powell minimisation.  Restarts when a
minimum is found.  Returns vector of optimised estimates.

callBobyqa(vector of estimates): sets up input to BOBYQA minimisation algorithm.
Scales estimates to the same range since the constraints have to be constant (for 
example if the lower constraint is 0 and the upper is 100, for a value that can
range between 0 and 1 the current estimate is multiplied by 100, so it ranges 
between 0 and 100).  Implements a functor to scale the estimates back to their
natural range before evaluating their fitness.  Returns the set of optimised 
parameters, scaled back to their natural range.

callLM(vector of estimates): scales estimates so that they are bound by similar 
constraints.  Initiate Levenberg-Marquardt minimisation, using external library.

callQuasi(vector of estimates): provides the interface to Quasi-Newton minimisation.
Uses a functor to approximate derivatives using finite differences, which are passed
to the algorithm along with the set of parameters.


****************** callfitness.cpp ****************** (header callfitness.h)

Other files included: "estimates.h"
                      "profile.h"
                      "globals.h"
                      
Contains routines that build the Sersic model from the current set of estimates 
and evaluates the fitness of the model by calculating the reduced Chi-square 
statistic.

fitnessStatistic(2D vector of actual values, 2D vector of Sersic values, vector 
of estimates, x and y dimensions of model and region): loops through each pixel 
in the 2D vectors and subtracts the model values (plus background level) from the 
actual values and squares the difference.  Divides each squared difference by the 
error estimation (square root of the actual pixel value at the current location).  
Divides the total sum of squared differences by the total number of pixels in the
region minus the number of parameters in the model.  Returns the resulting reduced
Chi-squared statistic.

fitness(vector of estimates): calculates the Sersic profile for the current set 
of estimates using newProfile (profile.cpp).  Passes this profile to fitnessStatistic
and returns the fitness statistic calculated.

psf_fitnessStatistic(as above but with PSF model not Sersic model in 2D vector): 
calculates the fitness statistic of the Gaussian profile that fits the PSF star, 
same algorithm as above.

psf_fitness(as above): as above but calculates the Gaussian profile rather than 
the Sersic profile.


****************** profile.cpp ****************** (header profile.h)

Other files included: "FFT.h"

Contains functions to create 2D Sersic (for the galaxy) and Gaussian (for the PSF 
star) profiles.

delta(height,distance): finds the result of applying the Dirac delta function with 
the specified height at the radial distance from the centre of the galaxy.

contsersic(scale radius, Sersic index, distance, central brightness): calculates 
the Sersic value of a pixel based on its radial distance from the centre of the
galaxy.

newProfile(x and y dimensions of model, vector of estimates): calculates the radial
distance of a pixel from the centre of the galaxy based on the axis ratio and 
rotates each co-ordinate by the position angle.  Calls contsersic to find the 
Sersic value of each pixel based on this distance.  Loops through every pixel in 
the x by y model until each Sersic value has been calculated.  Then calls the delta
function to scale each Sersic value according to the current delta height.  Then 
convolves the model with the PSF using convolve (FFT.cpp).  Returns the result.

createRegion(2D vector of actual values, 2D vector of Sersic values, x and y 
dimensions): subtracts each Sersic value from the corresponding actual value in 
the image to create a 2D vector of residual pixels.  Returns this vector.

contpsf(sigma of PSF, distance from centre, central brightness): same algorithm 
as in contsersic but calculates the Gaussian pixel value rather than Sersic.  Only 
used if the PSF is not input as an image.

psf_profile(x and y dimensions of PSF region, vector of estimates): same as newProfile
but does not calculate the radial distance (uses Euclidean) or rotate the pixels.
Only used if the PSF is not input as an image.


****************** FFT.cpp ****************** (header FFT.h)

Other files included: "fftw3.h" (external FFTW library)
                      "Array.h" (external FFTW++ library)
                      "fftw++.h" (external FFTW++ library)
                      "megio.h"
                      "globals.h"
                      "vars.h"
                      
Contains routines to create a Gaussian kernel based on the PSF sigma, pad the current
model, and convolve the model with the kernel.

padKernel(2D vector array of PSF values, new x and y dimensions after padding):
pads the PSF kernel with 0s up to the new x and y dimensions.  Implements row and 
column wrapping so that the central co-ordinates of the PSF kernel become the 
(0,0) co-ordinates of the padded kernel (necessary for convolution).  Returns the 
padded kernel.

GaussianPSF(dimension, PSF width sigma): creates a square Gaussian kernel defined
by the dimension and the sigma value, using the 2D normalised Gaussian function.
Returns the Gaussian kernel.  Only used if the PSF is not input as an image.

padImage(2d vector of Sersic values, new x and y dimensions): creates a new 2D vector
with size defined by the new x and y dimensions.  Inserts the 2D Sersic vector into
the middle of the new 2D vector such that the central co-ordinates of the Sersic 
vector are the central co-ordinates of the new vector.  Pads the rest of the vector 
with 0s.  Returns the padded 2D vector of Sersic values.

unpadImage(2D vector of convolved values, original x and y dimensions of model): 
removes the padding previously applied to the Sersic model.  Returns the unpadded
convolved Sersic model.

convolve(2D vector of Sersic values, x and y dimensions of model, PSF width sigma):
calculates the new dimensions of the padded image and padded kernel (needs to be 
twice the current dimensions rounded up to the nearest power of 2).  If the PSF is
not input as an image it calculates the width of the Gaussian kernel according to 
the variable ktol defined in vars.h, and creates the kernel according to the width 
and sigma values.  Pads the image and kernel (regardless of whether it was input 
as an image or calcuated), applies the FFT to both.  Multiplies each complex value 
in the FFT of the image by the corresponding value in the FFT of the kernel.  
Applies the inverse FFT to the convolved values and unpads the result.  Returns 
the convolved Sersic model.


****************** globals.h ******************

Contains global variables that cannot be passed as arguments to a function (for 
example because of the specific inputs needed by minimisation functions).

These are the two co-ordinates arrays and the two 2D vectors containing the values 
of pixels in the region containing the galaxy and the region containing the star 
from which the PSF is to be modelled; a variable psfimage indicating if the PSF 
was input as an image (0) or if it is to be calculated from a region in the main 
image file (1).  There is also a 2D vector that stores the psf image pixel values 
if psfimage equals 0.  The user should not edit this file.


****************** vars.h ******************

Defines ktol; the accuracy of the Gaussian kernel.  If ktol = 6 then the accuracy 
of the kernel is 10e-6 and so the necessary width to achieve this is calculated by

width = square root ( 2 * ktol * log(10) ) (which equals roughly 2.6).

This value is multipled by sigma to generate a dimension which will contain enough
pixels to match the accuracy.

This header file is intended to store values that the user might wish to alter, 
for example the tolerance of the minimisation function to a sub-optimal solution.  
Although other parameters are not currently implemented in the code, this structure
is designed with a view to later versions of the software and it is expected that 
there will be more variables defined here.  This is why there is a separate file 
for these variables, rather than just including them in globals.h.

                      

                      
                      
                      
                      
                      
                      
                      
                      


